function simpleTagsInputCreateEvent(t, e) {
  const s = new CustomEvent(t, { bubbles: !0, cancelable: !0, detail: e });
  document.dispatchEvent(s);
}
function simpleTagsInputRemoveTag(t) {
  simpleTagsInputCreateEvent(t.getAttribute("data-target"), {
    type: "removeTag",
    tagValue: t.getAttribute("data-value"),
    element: t,
  });
}
function simpleTagsInputAddTag(t) {
  simpleTagsInputCreateEvent(t.getAttribute("data-target"), {
    type: "addTag",
    tagValue: t.getAttribute("data-value"),
    element: t,
  });
}
!(function (t) {
  function e() {
    this.ul.querySelectorAll("li").forEach((t) => t.remove()),
      this.tags
        .slice()
        .reverse()
        .forEach((t) => {
          let e = `<li>${t} <span data-value='${t}' data-target='${this.bridgeID}' onclick="simpleTagsInputRemoveTag(this)">X</span></li>`;
          this.ul.insertAdjacentHTML("afterbegin", e);
        });
  }
  (this.simpleTagsInput = function () {
    (this.tags = []),
      (this.searchItems = []),
      (this.input = void 0),
      (this.ul = void 0),
      (this.bridgeID =
        Math.random().toString(29).substring(2) +
        new Date().getTime().toString() +
        Math.random().toString(29).substring(2)),
      (this.searchListEl = void 0),
      (this.settings =
        arguments[0] && "object" == typeof arguments[0] ? arguments[0] : {}),
      function () {
        if (
          !function () {
            try {
              let t = this.settings.inputEl ? this.settings.inputEl : void 0,
                e = this.settings.listEl ? this.settings.listEl : void 0;
              this.searchItems = this.settings.autocompleteSearchList
                ? this.settings.autocompleteSearchList
                : [];
              let s = document.getElementById(t),
                i = document.getElementById(e);
              return (
                "INPUT" == s.tagName &&
                "UL" == i.tagName &&
                ((this.input = s),
                (this.ul = i),
                this.ul.classList.add("tagsList"),
                !0)
              );
            } catch (t) {
              return !1;
            }
          }.call(this)
        )
          throw new Error("simpleTagsInput: input or list element not found");
        this.input.addEventListener(
          "keyup",
          function (t) {
            if (" " == t.key || "Enter" == t.key) {
              let s = t.target.value.replace(/\s+/g, "");
              s.length > 1 &&
                !this.tags.includes(s) &&
                (this.tags.push(s), e.call(this)),
                (t.target.value = "");
            } else {
              let e = t.target.value.replace(/\s+/g, " ");
              e.length > 0
                ? function (t) {
                    let e = t.target.value,
                      s = this.searchItems.filter(
                        (t) => -1 != t.toLowerCase().indexOf(e.toLowerCase())
                      ),
                      i =
                        "<p style='border-bottom: 1px solid lightgrey; margin-bottom: 0px; font-weight: bold; padding: 5px; font-style: italic '>نتایج جست و جو:</p>";
                    s.forEach((t) => {
                      i += `<li data-value='${t}' data-target='${this.bridgeID}' onclick="simpleTagsInputAddTag(this)">${t}</li>`;
                    }),
                      (this.searchListEl.innerHTML = i),
                      0 == s.length
                        ? (this.searchListEl.style.display = "none")
                        : (this.searchListEl.style.display = "block");
                  }.call(this, t)
                : (this.searchListEl.style.display = "none");
            }
          }.bind(this)
        ),
          function () {
            let t = Math.random().toString(30).substring(2),
              e = `<ul id="${t}" class='simple-tags-input-search-list' style='display: none'></ul>`;
            this.input.insertAdjacentHTML("afterend", e),
              (this.searchListEl = document.getElementById(t));
          }.call(this),
          document.addEventListener(
            this.bridgeID,
            function (t) {
              let s = t.detail.type,
                i = t.detail.tagValue,
                a = t.detail.element;
              "addTag" == s &&
                function (t) {
                  (this.input.value = ""),
                    (this.searchListEl.style.display = "none"),
                    t.length > 1 &&
                      !this.tags.includes(t) &&
                      (this.tags.push(t), e.call(this));
                }.call(this, i);
              "removeTag" == s &&
                function (t, e) {
                  let s = this.tags.indexOf(e);
                  s > -1 &&
                    ((this.tags = [
                      ...this.tags.slice(0, s),
                      ...this.tags.slice(s + 1),
                    ]),
                    t.parentElement.remove());
                }.call(this, a, i);
            }.bind(this)
          ),
          e.call(this);
      }.call(this);
  }),
    (simpleTagsInput.prototype.getTags = function () {
      return this.tags;
    }),
    (simpleTagsInput.prototype.addTag = function (t) {
      let s = t.replace(/\s+/g, "");
      s.length > 1 &&
        !this.tags.includes(s) &&
        s.split(",").forEach((t) => {
          this.tags.push(t), e.call(this);
        });
    }),
    (simpleTagsInput.prototype.removeTag = function (t) {
      let s = this.tags.indexOf(t);
      s > -1 &&
        ((this.tags = [...this.tags.slice(0, s), ...this.tags.slice(s + 1)]),
        e.call(this));
    });
})();
